232. Implement Queue using Stacks


Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.
Notes:
You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).


------------------------------------------------------------------------------------------------------------------------------------------------
用两个栈实现一个队列。
栈：后进先出
队列：先进先出
进队时压入s1，出队时弹出s2，s2为空时，s1倒入s2。两次逆序恢复了原序。


class Queue {
public:
    stack<int> s1;
    stack<int> s2;
    // Push element x to the back of queue.
    void push(int x) {
        s1.push(x);
    }

    // Removes the element from in front of queue.
    void pop(void) {
        if(s2.empty()){
            while(s1.empty()==0){
                int top=s1.top();
                s1.pop();
                s2.push(top);
            }
        }
        s2.pop();
    }

    // Get the front element.
    int peek(void) {
        if(s2.empty()){
            while(s1.empty()==0){
                int top=s1.top();
                s1.pop();
                s2.push(top);
            }
        }
        return s2.top();
    }

    // Return whether the queue is empty.
    bool empty(void) {
        return s1.empty()&&s2.empty();
    }
};