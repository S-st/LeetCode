121. Best Time to Buy and Sell Stock 


Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.


------------------------------------------------------------------------------------------------------------------------------------------------
有一个数组，第i个数值为第i天的价格，只可以买一只股票卖一支股票(完成一次交易)，求收益的最大值。
一个简单的动态规划问题，先遍历数组看最小值，即买入价格，然后求数组中每个值和最小值的差值，最大差值即为最大的利润值。

C++：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size() < 2) return 0;
        int maxProfit=0;
        int minPrice=prices[0];
        for(int i=1;i<prices.size();i++){
            minPrice=min(minPrice,prices[i]);
            maxProfit=max(maxProfit,prices[i]-minPrice);
        }
        return maxProfit;
    }
};

JavaScript：
/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    if (prices.length < 2) return 0;
        var maxProfit=0;
        var minPrice=prices[0];
        for(var i=1;i<prices.length;i++){
            minPrice=Math.min(minPrice,prices[i]);
            maxProfit=Math.max(maxProfit,prices[i]-minPrice);
        }
        return maxProfit;
};

java：
public class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length < 2) return 0;
        int maxProfit=0;
        int minPrice=prices[0];
        for(int i=1;i<prices.length;i++){
            minPrice=Math.min(minPrice,prices[i]);
            maxProfit=Math.max(maxProfit,prices[i]-minPrice);
        }
        return maxProfit;
    }
}